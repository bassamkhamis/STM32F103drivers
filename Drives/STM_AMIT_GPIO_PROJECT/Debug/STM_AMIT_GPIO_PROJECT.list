
STM_AMIT_GPIO_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e8  080006f0  000106f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e8  080006e8  000106f0  2**0
                  CONTENTS
  4 .ARM          00000000  080006e8  080006e8  000106f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e8  080006f0  000106f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e8  080006e8  000106e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006ec  080006ec  000106ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006f0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006f0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000106f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000412  00000000  00000000  00010719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000021d  00000000  00000000  00010b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00010d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00010e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000127a  00000000  00000000  00010ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000927  00000000  00000000  0001214a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000469f  00000000  00000000  00012a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00017110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000022c  00000000  00000000  00017164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080006d0 	.word	0x080006d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080006d0 	.word	0x080006d0

08000170 <MGPIO_VidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b02      	cmp	r3, #2
 8000186:	d07a      	beq.n	800027e <MGPIO_VidSetPinDirection+0x10e>
 8000188:	2b02      	cmp	r3, #2
 800018a:	f300 80b1 	bgt.w	80002f0 <MGPIO_VidSetPinDirection+0x180>
 800018e:	2b00      	cmp	r3, #0
 8000190:	d002      	beq.n	8000198 <MGPIO_VidSetPinDirection+0x28>
 8000192:	2b01      	cmp	r3, #1
 8000194:	d03a      	beq.n	800020c <MGPIO_VidSetPinDirection+0x9c>
			Copy_u8Pin = Copy_u8Pin - 8;
			GPIOC_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			GPIOC_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}
		break;
	default :break;
 8000196:	e0ab      	b.n	80002f0 <MGPIO_VidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 )
 8000198:	79bb      	ldrb	r3, [r7, #6]
 800019a:	2b07      	cmp	r3, #7
 800019c:	d817      	bhi.n	80001ce <MGPIO_VidSetPinDirection+0x5e>
			GPIOA_CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 800019e:	4b5a      	ldr	r3, [pc, #360]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	79ba      	ldrb	r2, [r7, #6]
 80001a4:	0092      	lsls	r2, r2, #2
 80001a6:	210f      	movs	r1, #15
 80001a8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ac:	43d2      	mvns	r2, r2
 80001ae:	4611      	mov	r1, r2
 80001b0:	4a55      	ldr	r2, [pc, #340]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001b2:	400b      	ands	r3, r1
 80001b4:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80001b6:	4b54      	ldr	r3, [pc, #336]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	7979      	ldrb	r1, [r7, #5]
 80001bc:	79ba      	ldrb	r2, [r7, #6]
 80001be:	0092      	lsls	r2, r2, #2
 80001c0:	fa01 f202 	lsl.w	r2, r1, r2
 80001c4:	4611      	mov	r1, r2
 80001c6:	4a50      	ldr	r2, [pc, #320]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001c8:	430b      	orrs	r3, r1
 80001ca:	6013      	str	r3, [r2, #0]
		break;
 80001cc:	e092      	b.n	80002f4 <MGPIO_VidSetPinDirection+0x184>
		else if(Copy_u8Pin <=15 )
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	2b0f      	cmp	r3, #15
 80001d2:	f200 808f 	bhi.w	80002f4 <MGPIO_VidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	3b08      	subs	r3, #8
 80001da:	71bb      	strb	r3, [r7, #6]
			GPIOA_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80001dc:	4b4b      	ldr	r3, [pc, #300]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	79ba      	ldrb	r2, [r7, #6]
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	210f      	movs	r1, #15
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	43d2      	mvns	r2, r2
 80001ec:	4611      	mov	r1, r2
 80001ee:	4a47      	ldr	r2, [pc, #284]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 80001f0:	400b      	ands	r3, r1
 80001f2:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80001f4:	4b45      	ldr	r3, [pc, #276]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	7979      	ldrb	r1, [r7, #5]
 80001fa:	79ba      	ldrb	r2, [r7, #6]
 80001fc:	0092      	lsls	r2, r2, #2
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	4611      	mov	r1, r2
 8000204:	4a41      	ldr	r2, [pc, #260]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 8000206:	430b      	orrs	r3, r1
 8000208:	6013      	str	r3, [r2, #0]
		break;
 800020a:	e073      	b.n	80002f4 <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 )
 800020c:	79bb      	ldrb	r3, [r7, #6]
 800020e:	2b07      	cmp	r3, #7
 8000210:	d817      	bhi.n	8000242 <MGPIO_VidSetPinDirection+0xd2>
			GPIOB_CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 8000212:	4b3f      	ldr	r3, [pc, #252]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	79ba      	ldrb	r2, [r7, #6]
 8000218:	0092      	lsls	r2, r2, #2
 800021a:	210f      	movs	r1, #15
 800021c:	fa01 f202 	lsl.w	r2, r1, r2
 8000220:	43d2      	mvns	r2, r2
 8000222:	4611      	mov	r1, r2
 8000224:	4a3a      	ldr	r2, [pc, #232]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 8000226:	400b      	ands	r3, r1
 8000228:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800022a:	4b39      	ldr	r3, [pc, #228]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	7979      	ldrb	r1, [r7, #5]
 8000230:	79ba      	ldrb	r2, [r7, #6]
 8000232:	0092      	lsls	r2, r2, #2
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	4611      	mov	r1, r2
 800023a:	4a35      	ldr	r2, [pc, #212]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 800023c:	430b      	orrs	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
		break;
 8000240:	e05a      	b.n	80002f8 <MGPIO_VidSetPinDirection+0x188>
		else if(Copy_u8Pin <=15 )
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d857      	bhi.n	80002f8 <MGPIO_VidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	3b08      	subs	r3, #8
 800024c:	71bb      	strb	r3, [r7, #6]
			GPIOB_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 800024e:	4b31      	ldr	r3, [pc, #196]	; (8000314 <MGPIO_VidSetPinDirection+0x1a4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	79ba      	ldrb	r2, [r7, #6]
 8000254:	0092      	lsls	r2, r2, #2
 8000256:	210f      	movs	r1, #15
 8000258:	fa01 f202 	lsl.w	r2, r1, r2
 800025c:	43d2      	mvns	r2, r2
 800025e:	4611      	mov	r1, r2
 8000260:	4a2c      	ldr	r2, [pc, #176]	; (8000314 <MGPIO_VidSetPinDirection+0x1a4>)
 8000262:	400b      	ands	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000266:	4b2b      	ldr	r3, [pc, #172]	; (8000314 <MGPIO_VidSetPinDirection+0x1a4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	7979      	ldrb	r1, [r7, #5]
 800026c:	79ba      	ldrb	r2, [r7, #6]
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	4611      	mov	r1, r2
 8000276:	4a27      	ldr	r2, [pc, #156]	; (8000314 <MGPIO_VidSetPinDirection+0x1a4>)
 8000278:	430b      	orrs	r3, r1
 800027a:	6013      	str	r3, [r2, #0]
		break;
 800027c:	e03c      	b.n	80002f8 <MGPIO_VidSetPinDirection+0x188>
		if(Copy_u8Pin <= 7 )
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	2b07      	cmp	r3, #7
 8000282:	d817      	bhi.n	80002b4 <MGPIO_VidSetPinDirection+0x144>
			GPIOC_CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 8000284:	4b24      	ldr	r3, [pc, #144]	; (8000318 <MGPIO_VidSetPinDirection+0x1a8>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	79ba      	ldrb	r2, [r7, #6]
 800028a:	0092      	lsls	r2, r2, #2
 800028c:	210f      	movs	r1, #15
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	43d2      	mvns	r2, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a20      	ldr	r2, [pc, #128]	; (8000318 <MGPIO_VidSetPinDirection+0x1a8>)
 8000298:	400b      	ands	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800029c:	4b1e      	ldr	r3, [pc, #120]	; (8000318 <MGPIO_VidSetPinDirection+0x1a8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	7979      	ldrb	r1, [r7, #5]
 80002a2:	79ba      	ldrb	r2, [r7, #6]
 80002a4:	0092      	lsls	r2, r2, #2
 80002a6:	fa01 f202 	lsl.w	r2, r1, r2
 80002aa:	4611      	mov	r1, r2
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <MGPIO_VidSetPinDirection+0x1a8>)
 80002ae:	430b      	orrs	r3, r1
 80002b0:	6013      	str	r3, [r2, #0]
		break;
 80002b2:	e023      	b.n	80002fc <MGPIO_VidSetPinDirection+0x18c>
		else if(Copy_u8Pin <=15 )
 80002b4:	79bb      	ldrb	r3, [r7, #6]
 80002b6:	2b0f      	cmp	r3, #15
 80002b8:	d820      	bhi.n	80002fc <MGPIO_VidSetPinDirection+0x18c>
			Copy_u8Pin = Copy_u8Pin - 8;
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	3b08      	subs	r3, #8
 80002be:	71bb      	strb	r3, [r7, #6]
			GPIOC_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <MGPIO_VidSetPinDirection+0x1ac>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	79ba      	ldrb	r2, [r7, #6]
 80002c6:	0092      	lsls	r2, r2, #2
 80002c8:	210f      	movs	r1, #15
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	4611      	mov	r1, r2
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <MGPIO_VidSetPinDirection+0x1ac>)
 80002d4:	400b      	ands	r3, r1
 80002d6:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <MGPIO_VidSetPinDirection+0x1ac>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	7979      	ldrb	r1, [r7, #5]
 80002de:	79ba      	ldrb	r2, [r7, #6]
 80002e0:	0092      	lsls	r2, r2, #2
 80002e2:	fa01 f202 	lsl.w	r2, r1, r2
 80002e6:	4611      	mov	r1, r2
 80002e8:	4a0c      	ldr	r2, [pc, #48]	; (800031c <MGPIO_VidSetPinDirection+0x1ac>)
 80002ea:	430b      	orrs	r3, r1
 80002ec:	6013      	str	r3, [r2, #0]
		break;
 80002ee:	e005      	b.n	80002fc <MGPIO_VidSetPinDirection+0x18c>
	default :break;
 80002f0:	bf00      	nop
 80002f2:	e004      	b.n	80002fe <MGPIO_VidSetPinDirection+0x18e>
		break;
 80002f4:	bf00      	nop
 80002f6:	e002      	b.n	80002fe <MGPIO_VidSetPinDirection+0x18e>
		break;
 80002f8:	bf00      	nop
 80002fa:	e000      	b.n	80002fe <MGPIO_VidSetPinDirection+0x18e>
		break;
 80002fc:	bf00      	nop
	}


}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40010800 	.word	0x40010800
 800030c:	40010804 	.word	0x40010804
 8000310:	40010c00 	.word	0x40010c00
 8000314:	40010c04 	.word	0x40010c04
 8000318:	40011000 	.word	0x40011000
 800031c:	40011004 	.word	0x40011004

08000320 <MGPIO_VidSetPinValue>:

void MGPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
 800032a:	460b      	mov	r3, r1
 800032c:	71bb      	strb	r3, [r7, #6]
 800032e:	4613      	mov	r3, r2
 8000330:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	2b02      	cmp	r3, #2
 8000336:	d040      	beq.n	80003ba <MGPIO_VidSetPinValue+0x9a>
 8000338:	2b02      	cmp	r3, #2
 800033a:	dc60      	bgt.n	80003fe <MGPIO_VidSetPinValue+0xde>
 800033c:	2b00      	cmp	r3, #0
 800033e:	d002      	beq.n	8000346 <MGPIO_VidSetPinValue+0x26>
 8000340:	2b01      	cmp	r3, #1
 8000342:	d01d      	beq.n	8000380 <MGPIO_VidSetPinValue+0x60>
		}
		break;

	}

}
 8000344:	e05b      	b.n	80003fe <MGPIO_VidSetPinValue+0xde>
		if( u8Copy_u8Value == HIGH ){
 8000346:	797b      	ldrb	r3, [r7, #5]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d10a      	bne.n	8000362 <MGPIO_VidSetPinValue+0x42>
			SET_BIT( GPIOA_ODR , Copy_u8Pin );
 800034c:	4b2e      	ldr	r3, [pc, #184]	; (8000408 <MGPIO_VidSetPinValue+0xe8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	79ba      	ldrb	r2, [r7, #6]
 8000352:	2101      	movs	r1, #1
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	4611      	mov	r1, r2
 800035a:	4a2b      	ldr	r2, [pc, #172]	; (8000408 <MGPIO_VidSetPinValue+0xe8>)
 800035c:	430b      	orrs	r3, r1
 800035e:	6013      	str	r3, [r2, #0]
		break;
 8000360:	e048      	b.n	80003f4 <MGPIO_VidSetPinValue+0xd4>
		}else if( u8Copy_u8Value == LOW ){
 8000362:	797b      	ldrb	r3, [r7, #5]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d145      	bne.n	80003f4 <MGPIO_VidSetPinValue+0xd4>
			CLR_BIT(  GPIOA_ODR , Copy_u8Pin );
 8000368:	4b27      	ldr	r3, [pc, #156]	; (8000408 <MGPIO_VidSetPinValue+0xe8>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	79ba      	ldrb	r2, [r7, #6]
 800036e:	2101      	movs	r1, #1
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	43d2      	mvns	r2, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a23      	ldr	r2, [pc, #140]	; (8000408 <MGPIO_VidSetPinValue+0xe8>)
 800037a:	400b      	ands	r3, r1
 800037c:	6013      	str	r3, [r2, #0]
		break;
 800037e:	e039      	b.n	80003f4 <MGPIO_VidSetPinValue+0xd4>
		if( u8Copy_u8Value == HIGH ){
 8000380:	797b      	ldrb	r3, [r7, #5]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d10a      	bne.n	800039c <MGPIO_VidSetPinValue+0x7c>
			SET_BIT( GPIOB_ODR  , Copy_u8Pin );
 8000386:	4b21      	ldr	r3, [pc, #132]	; (800040c <MGPIO_VidSetPinValue+0xec>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	79ba      	ldrb	r2, [r7, #6]
 800038c:	2101      	movs	r1, #1
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	4611      	mov	r1, r2
 8000394:	4a1d      	ldr	r2, [pc, #116]	; (800040c <MGPIO_VidSetPinValue+0xec>)
 8000396:	430b      	orrs	r3, r1
 8000398:	6013      	str	r3, [r2, #0]
		break;
 800039a:	e02d      	b.n	80003f8 <MGPIO_VidSetPinValue+0xd8>
		}else if( u8Copy_u8Value == LOW ){
 800039c:	797b      	ldrb	r3, [r7, #5]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d12a      	bne.n	80003f8 <MGPIO_VidSetPinValue+0xd8>
			CLR_BIT( GPIOB_ODR  , Copy_u8Pin );
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MGPIO_VidSetPinValue+0xec>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	79ba      	ldrb	r2, [r7, #6]
 80003a8:	2101      	movs	r1, #1
 80003aa:	fa01 f202 	lsl.w	r2, r1, r2
 80003ae:	43d2      	mvns	r2, r2
 80003b0:	4611      	mov	r1, r2
 80003b2:	4a16      	ldr	r2, [pc, #88]	; (800040c <MGPIO_VidSetPinValue+0xec>)
 80003b4:	400b      	ands	r3, r1
 80003b6:	6013      	str	r3, [r2, #0]
		break;
 80003b8:	e01e      	b.n	80003f8 <MGPIO_VidSetPinValue+0xd8>
		if( u8Copy_u8Value == HIGH ){
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d10a      	bne.n	80003d6 <MGPIO_VidSetPinValue+0xb6>
			SET_BIT( GPIOC_ODR , Copy_u8Pin );
 80003c0:	4b13      	ldr	r3, [pc, #76]	; (8000410 <MGPIO_VidSetPinValue+0xf0>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	79ba      	ldrb	r2, [r7, #6]
 80003c6:	2101      	movs	r1, #1
 80003c8:	fa01 f202 	lsl.w	r2, r1, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a10      	ldr	r2, [pc, #64]	; (8000410 <MGPIO_VidSetPinValue+0xf0>)
 80003d0:	430b      	orrs	r3, r1
 80003d2:	6013      	str	r3, [r2, #0]
		break;
 80003d4:	e012      	b.n	80003fc <MGPIO_VidSetPinValue+0xdc>
		}else if( u8Copy_u8Value == LOW ){
 80003d6:	797b      	ldrb	r3, [r7, #5]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d10f      	bne.n	80003fc <MGPIO_VidSetPinValue+0xdc>
			CLR_BIT( GPIOC_ODR , Copy_u8Pin );
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MGPIO_VidSetPinValue+0xf0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	79ba      	ldrb	r2, [r7, #6]
 80003e2:	2101      	movs	r1, #1
 80003e4:	fa01 f202 	lsl.w	r2, r1, r2
 80003e8:	43d2      	mvns	r2, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a08      	ldr	r2, [pc, #32]	; (8000410 <MGPIO_VidSetPinValue+0xf0>)
 80003ee:	400b      	ands	r3, r1
 80003f0:	6013      	str	r3, [r2, #0]
		break;
 80003f2:	e003      	b.n	80003fc <MGPIO_VidSetPinValue+0xdc>
		break;
 80003f4:	bf00      	nop
 80003f6:	e002      	b.n	80003fe <MGPIO_VidSetPinValue+0xde>
		break;
 80003f8:	bf00      	nop
 80003fa:	e000      	b.n	80003fe <MGPIO_VidSetPinValue+0xde>
		break;
 80003fc:	bf00      	nop
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	4001080c 	.word	0x4001080c
 800040c:	40010c0c 	.word	0x40010c0c
 8000410:	4001100c 	.word	0x4001100c

08000414 <MGPIO_u8GetPinValue>:

u8   MGPIO_u8GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin ){
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	460a      	mov	r2, r1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	4613      	mov	r3, r2
 8000422:	71bb      	strb	r3, [r7, #6]

	u8 LOC_u8Result = 0 ;
 8000424:	2300      	movs	r3, #0
 8000426:	73fb      	strb	r3, [r7, #15]

	switch(Copy_u8Port)
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d01a      	beq.n	8000464 <MGPIO_u8GetPinValue+0x50>
 800042e:	2b02      	cmp	r3, #2
 8000430:	dc22      	bgt.n	8000478 <MGPIO_u8GetPinValue+0x64>
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <MGPIO_u8GetPinValue+0x28>
 8000436:	2b01      	cmp	r3, #1
 8000438:	d00a      	beq.n	8000450 <MGPIO_u8GetPinValue+0x3c>
 800043a:	e01d      	b.n	8000478 <MGPIO_u8GetPinValue+0x64>
	{
	case GPIOA:
		LOC_u8Result = GET_BIT( GPIOA_IDR , Copy_u8Pin );
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MGPIO_u8GetPinValue+0x70>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	79bb      	ldrb	r3, [r7, #6]
 8000442:	fa22 f303 	lsr.w	r3, r2, r3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	73fb      	strb	r3, [r7, #15]

		break;
 800044e:	e013      	b.n	8000478 <MGPIO_u8GetPinValue+0x64>
	case GPIOB:

		LOC_u8Result = GET_BIT( GPIOB_IDR , Copy_u8Pin );
 8000450:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <MGPIO_u8GetPinValue+0x74>)
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	79bb      	ldrb	r3, [r7, #6]
 8000456:	fa22 f303 	lsr.w	r3, r2, r3
 800045a:	b2db      	uxtb	r3, r3
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	73fb      	strb	r3, [r7, #15]

		break;
 8000462:	e009      	b.n	8000478 <MGPIO_u8GetPinValue+0x64>
	case GPIOC:

		LOC_u8Result = GET_BIT( GPIOC_IDR , Copy_u8Pin );
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MGPIO_u8GetPinValue+0x78>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	79bb      	ldrb	r3, [r7, #6]
 800046a:	fa22 f303 	lsr.w	r3, r2, r3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	73fb      	strb	r3, [r7, #15]

		break;
 8000476:	bf00      	nop
	}
	return LOC_u8Result;
 8000478:	7bfb      	ldrb	r3, [r7, #15]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40010808 	.word	0x40010808
 8000488:	40010c08 	.word	0x40010c08
 800048c:	40011008 	.word	0x40011008

08000490 <LED_void_init>:
#include "DIO_interface.h"
#include "HAl_LED.h"


void LED_void_init(u8 copy_PORT, u8 copy_u8PIN)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	460a      	mov	r2, r1
 800049a:	71fb      	strb	r3, [r7, #7]
 800049c:	4613      	mov	r3, r2
 800049e:	71bb      	strb	r3, [r7, #6]
	
			   switch(copy_PORT){
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d014      	beq.n	80004d0 <LED_void_init+0x40>
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	dc19      	bgt.n	80004de <LED_void_init+0x4e>
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d002      	beq.n	80004b4 <LED_void_init+0x24>
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d007      	beq.n	80004c2 <LED_void_init+0x32>
		    case GPIOC:  MGPIO_VidSetPinDirection(copy_PORT,copy_u8PIN, OUTPUT_SPEED_2MHZ_PP);

				         break;			  
						  
			default :
                         break;
 80004b2:	e014      	b.n	80004de <LED_void_init+0x4e>
		   case GPIOA:   MGPIO_VidSetPinDirection(copy_PORT,copy_u8PIN, OUTPUT_SPEED_2MHZ_PP);
 80004b4:	79b9      	ldrb	r1, [r7, #6]
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2202      	movs	r2, #2
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff fe58 	bl	8000170 <MGPIO_VidSetPinDirection>
					     break;
 80004c0:	e00e      	b.n	80004e0 <LED_void_init+0x50>
		   case GPIOB:    MGPIO_VidSetPinDirection(copy_PORT,copy_u8PIN, OUTPUT_SPEED_2MHZ_PP);
 80004c2:	79b9      	ldrb	r1, [r7, #6]
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2202      	movs	r2, #2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe51 	bl	8000170 <MGPIO_VidSetPinDirection>
						  break;
 80004ce:	e007      	b.n	80004e0 <LED_void_init+0x50>
		    case GPIOC:  MGPIO_VidSetPinDirection(copy_PORT,copy_u8PIN, OUTPUT_SPEED_2MHZ_PP);
 80004d0:	79b9      	ldrb	r1, [r7, #6]
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2202      	movs	r2, #2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fe4a 	bl	8000170 <MGPIO_VidSetPinDirection>
				         break;			  
 80004dc:	e000      	b.n	80004e0 <LED_void_init+0x50>
                         break;
 80004de:	bf00      	nop
	
        }
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <LED_void_toggle>:
	
}


void LED_void_toggle(u8 copy_PORT, u8 copy_u8PIN)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
	u8 LOC_VAL = MGPIO_u8GetPinValue(copy_PORT, copy_u8PIN);
 80004f8:	79ba      	ldrb	r2, [r7, #6]
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff88 	bl	8000414 <MGPIO_u8GetPinValue>
 8000504:	4603      	mov	r3, r0
 8000506:	73fb      	strb	r3, [r7, #15]
	if(1 == LOC_VAL){
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d106      	bne.n	800051c <LED_void_toggle+0x34>
		MGPIO_VidSetPinValue(copy_PORT,copy_u8PIN,LOW);
 800050e:	79b9      	ldrb	r1, [r7, #6]
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	2200      	movs	r2, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff03 	bl	8000320 <MGPIO_VidSetPinValue>
	else{
		MGPIO_VidSetPinValue( copy_PORT, copy_u8PIN,HIGH);
	  }


}
 800051a:	e005      	b.n	8000528 <LED_void_toggle+0x40>
		MGPIO_VidSetPinValue( copy_PORT, copy_u8PIN,HIGH);
 800051c:	79b9      	ldrb	r1, [r7, #6]
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2201      	movs	r2, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fefc 	bl	8000320 <MGPIO_VidSetPinValue>
}
 8000528:	bf00      	nop
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void RCC_voidInitSysClock(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	#if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		RCC_CR   = 0x00010000; /* Enable HSE with no bypass */
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <RCC_voidInitSysClock+0x1c>)
 8000536:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800053a:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0x00000001;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <RCC_voidInitSysClock+0x20>)
 800053e:	2201      	movs	r2, #1
 8000540:	601a      	str	r2, [r3, #0]
		#endif
	
	#else
		#error("You chosed Wrong Clock type")
	#endif
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	40021004 	.word	0x40021004

08000554 <RCC_voidEnableClock>:



void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	460a      	mov	r2, r1
 800055e:	71fb      	strb	r3, [r7, #7]
 8000560:	4613      	mov	r3, r2
 8000562:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	2b1f      	cmp	r3, #31
 8000568:	d82a      	bhi.n	80005c0 <RCC_voidEnableClock+0x6c>
	{
		switch (Copy_u8BusId)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d01c      	beq.n	80005aa <RCC_voidEnableClock+0x56>
 8000570:	2b02      	cmp	r3, #2
 8000572:	dc25      	bgt.n	80005c0 <RCC_voidEnableClock+0x6c>
 8000574:	2b00      	cmp	r3, #0
 8000576:	d002      	beq.n	800057e <RCC_voidEnableClock+0x2a>
 8000578:	2b01      	cmp	r3, #1
 800057a:	d00b      	beq.n	8000594 <RCC_voidEnableClock+0x40>
	else
	{
		/* Return Error */
	}

}
 800057c:	e020      	b.n	80005c0 <RCC_voidEnableClock+0x6c>
			case RCC_AHB  : SET_BIT(RCC_AHBENR  ,Copy_u8PerId);   break;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <RCC_voidEnableClock+0x78>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	79ba      	ldrb	r2, [r7, #6]
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f202 	lsl.w	r2, r1, r2
 800058a:	4611      	mov	r1, r2
 800058c:	4a0f      	ldr	r2, [pc, #60]	; (80005cc <RCC_voidEnableClock+0x78>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e015      	b.n	80005c0 <RCC_voidEnableClock+0x6c>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR ,Copy_u8PerId);   break;
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <RCC_voidEnableClock+0x7c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	79ba      	ldrb	r2, [r7, #6]
 800059a:	2101      	movs	r1, #1
 800059c:	fa01 f202 	lsl.w	r2, r1, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <RCC_voidEnableClock+0x7c>)
 80005a4:	430b      	orrs	r3, r1
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	e00a      	b.n	80005c0 <RCC_voidEnableClock+0x6c>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR ,Copy_u8PerId);   break;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <RCC_voidEnableClock+0x80>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	79ba      	ldrb	r2, [r7, #6]
 80005b0:	2101      	movs	r1, #1
 80005b2:	fa01 f202 	lsl.w	r2, r1, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <RCC_voidEnableClock+0x80>)
 80005ba:	430b      	orrs	r3, r1
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	bf00      	nop
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40021014 	.word	0x40021014
 80005d0:	4002101c 	.word	0x4002101c
 80005d4:	40021018 	.word	0x40021018

080005d8 <main>:
#include "DIO_interface.h"
#include "HAL_LED.h"


int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 80005de:	f7ff ffa7 	bl	8000530 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2, 2); // Enable clock for GPIOA (A:2 B:3 C:4)
 80005e2:	2102      	movs	r1, #2
 80005e4:	2002      	movs	r0, #2
 80005e6:	f7ff ffb5 	bl	8000554 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2, 3); // Enable clock for GPIOD
 80005ea:	2103      	movs	r1, #3
 80005ec:	2002      	movs	r0, #2
 80005ee:	f7ff ffb1 	bl	8000554 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2, 4); // Enable clock for GPIOC
 80005f2:	2104      	movs	r1, #4
 80005f4:	2002      	movs	r0, #2
 80005f6:	f7ff ffad 	bl	8000554 <RCC_voidEnableClock>
	LED_void_init(GPIOB, PIN0);
 80005fa:	2100      	movs	r1, #0
 80005fc:	2001      	movs	r0, #1
 80005fe:	f7ff ff47 	bl	8000490 <LED_void_init>
	LED_void_init(GPIOA, PIN9);
 8000602:	2109      	movs	r1, #9
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ff43 	bl	8000490 <LED_void_init>
		for(int i =0; i<10000; i++);
		LED_void_off(GPIOB, PIN0);
		LED_void_off(GPIOA, PIN9);
		for(int i =0; i<10000; i++);  */
		// test 2
		LED_void_toggle(GPIOB, PIN0);
 800060a:	2100      	movs	r1, #0
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff ff6b 	bl	80004e8 <LED_void_toggle>
		LED_void_toggle(GPIOA, PIN9);
 8000612:	2109      	movs	r1, #9
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ff67 	bl	80004e8 <LED_void_toggle>
		for(int i =0; i<10000; i++);
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	e002      	b.n	8000626 <main+0x4e>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f242 720f 	movw	r2, #9999	; 0x270f
 800062c:	4293      	cmp	r3, r2
 800062e:	ddf7      	ble.n	8000620 <main+0x48>
		LED_void_toggle(GPIOB, PIN0);
 8000630:	e7eb      	b.n	800060a <main+0x32>
	...

08000634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000636:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000638:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000662:	f000 f811 	bl	8000688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff ffb7 	bl	80005d8 <main>

0800066a <LoopForever>:

LoopForever:
    b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   r0, =_estack
 800066c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000678:	080006f0 	.word	0x080006f0
  ldr r2, =_sbss
 800067c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000680:	2000001c 	.word	0x2000001c

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>
	...

08000688 <__libc_init_array>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2600      	movs	r6, #0
 800068c:	4d0c      	ldr	r5, [pc, #48]	; (80006c0 <__libc_init_array+0x38>)
 800068e:	4c0d      	ldr	r4, [pc, #52]	; (80006c4 <__libc_init_array+0x3c>)
 8000690:	1b64      	subs	r4, r4, r5
 8000692:	10a4      	asrs	r4, r4, #2
 8000694:	42a6      	cmp	r6, r4
 8000696:	d109      	bne.n	80006ac <__libc_init_array+0x24>
 8000698:	f000 f81a 	bl	80006d0 <_init>
 800069c:	2600      	movs	r6, #0
 800069e:	4d0a      	ldr	r5, [pc, #40]	; (80006c8 <__libc_init_array+0x40>)
 80006a0:	4c0a      	ldr	r4, [pc, #40]	; (80006cc <__libc_init_array+0x44>)
 80006a2:	1b64      	subs	r4, r4, r5
 80006a4:	10a4      	asrs	r4, r4, #2
 80006a6:	42a6      	cmp	r6, r4
 80006a8:	d105      	bne.n	80006b6 <__libc_init_array+0x2e>
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b0:	4798      	blx	r3
 80006b2:	3601      	adds	r6, #1
 80006b4:	e7ee      	b.n	8000694 <__libc_init_array+0xc>
 80006b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ba:	4798      	blx	r3
 80006bc:	3601      	adds	r6, #1
 80006be:	e7f2      	b.n	80006a6 <__libc_init_array+0x1e>
 80006c0:	080006e8 	.word	0x080006e8
 80006c4:	080006e8 	.word	0x080006e8
 80006c8:	080006e8 	.word	0x080006e8
 80006cc:	080006ec 	.word	0x080006ec

080006d0 <_init>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	bf00      	nop
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr

080006dc <_fini>:
 80006dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006de:	bf00      	nop
 80006e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e2:	bc08      	pop	{r3}
 80006e4:	469e      	mov	lr, r3
 80006e6:	4770      	bx	lr
